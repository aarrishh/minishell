üß© Minishell Project Split for 2 Members
üë©‚Äçüíª Member A ‚Äì Parser & Environment Logic
Responsible for everything related to input parsing, tokenizing, and environment manipulation.

Tasks:
1. Reading input
readline, add_history, loop in main.c

2. Tokenization
Split line into tokens
Handle operators: >, >>, <, |
Maintain token structure (linked list or array of structs)

3. Quote handling
Remove quotes but preserve content
Make sure ' and " are handled properly (no split inside quotes)

4. Variable expansion
$VAR ‚Üí replace with value from env
Handle special case $?

5. Environment (env) tools
Functions to get/set/replace variables
Copy envp to internal list

‚úÖ Outcome: after this step, you should produce a clean list of command structs: cmd = {cmd, args[], redirs[]}

-----------------------------------------------------------------------------------------------------------------

üë®‚Äçüíª Member B ‚Äì Execution, Builtins & Redirection
Responsible for running the commands, handling pipes and builtins, and managing file redirections.

Tasks:
1. Execution engine
Forking and running commands
Handle multiple commands with pipes

2. Redirections
Open files and use dup2() to redirect stdin/stdout
Handle >, >>, <

3. Builtins
Implement builtins:
cd, echo, pwd, export, unset, env, exit
Handle them without forking if needed (cd, exit, etc.)

4. Pipe logic
Create pipes for cmd1 | cmd2 | cmd3
Close unused pipe ends

5. Exit codes
Maintain $? value using global variable or status holder

‚úÖ Outcome: runs the parsed commands with proper redirection and environment

--------------------------------------------------------------------------------------------------




INFORMATION (DIFFERENCE BETWEEN > AND >>)

üîπ > (Single Greater Than) ‚Äî Output Redirection (Truncate)
What it does: Redirects standard output to a file, overwriting the file if it already exists.

Example:
echo "hello" > file.txt

‚úÖ Creates file.txt (if not existing)
‚úÖ Writes "hello" into it
‚ùå Erases any previous content in file.txt

üîπ >> (Double Greater Than) ‚Äî Output Redirection (Append)
What it does: Redirects standard output to a file, appending to the file if it already exists.

Example:
echo "world" >> file.txt

‚úÖ Creates file.txt (if not existing)
‚úÖ Adds "world" at the end of the existing content
‚úÖ Preserves existing data


-------------------------------------------------------------------------------------------------------------

‚úÖ All cases work ->

exit            # should exit with the last return status (e.g., $? value)
exit 0          # should exit with code 0
exit 42         # should exit with code 42
exit 256        # should exit with code 0 (256 % 256)
exit -1         # should exit with code 255 (-1 % 256)
exit 9223372036854775807   # LLONG_MAX, valid should exit with code 255
exit -9223372036854775808  # LLONG_MIN, valid should exit eith code 0


‚ùå Doesn't work

exit aaa 1
exit 1 aaaa

exit abc
# minishell: exit: abc: numeric argument required
# exit code = 255

exit 1 2
# minishell: exit: too many arguments
# do NOT exit, return 1

exit 9223372036854775808
# minishell: exit: 9223372036854775808: numeric argument required
# exit code = 255

exit -9223372036854775809
# minishell: exit: -9223372036854775809: numeric argument ``required
# exit code = 255

exit --
# minishell: exit: --: numeric argument required
# exit code = 255

exit -abc
# minishell: exit: -abc: numeric argument required
# exit code = 255

exit '42a'
# minishell: exit: 42a: numeric argument required
# exit code = 255

exit '   55'
# Valid in bash, if you trim spaces. Should be 55.

exit ''
# minishell: exit: : numeric argument required
# exit code = 255