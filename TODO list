🧩 Minishell Project Split for 2 Members
👩‍💻 Member A – Parser & Environment Logic
Responsible for everything related to input parsing, tokenizing, and environment manipulation.

Tasks:
1. Reading input
readline, add_history, loop in main.c

2. Tokenization
Split line into tokens
Handle operators: >, >>, <, |
Maintain token structure (linked list or array of structs)

3. Quote handling
Remove quotes but preserve content
Make sure ' and " are handled properly (no split inside quotes)

4. Variable expansion
$VAR → replace with value from env
Handle special case $?

5. Environment (env) tools
Functions to get/set/replace variables
Copy envp to internal list

✅ Outcome: after this step, you should produce a clean list of command structs: cmd = {cmd, args[], redirs[]}

-----------------------------------------------------------------------------------------------------------------

👨‍💻 Member B – Execution, Builtins & Redirection
Responsible for running the commands, handling pipes and builtins, and managing file redirections.

Tasks:
1. Execution engine
Forking and running commands
Handle multiple commands with pipes

2. Redirections
Open files and use dup2() to redirect stdin/stdout
Handle >, >>, <

3. Builtins
Implement builtins:
cd, echo, pwd, export, unset, env, exit
Handle them without forking if needed (cd, exit, etc.)

4. Pipe logic
Create pipes for cmd1 | cmd2 | cmd3
Close unused pipe ends

5. Exit codes
Maintain $? value using global variable or status holder

✅ Outcome: runs the parsed commands with proper redirection and environment

--------------------------------------------------------------------------------------------------




INFORMATION (DIFFERENCE BETWEEN > AND >>)

🔹 > (Single Greater Than) — Output Redirection (Truncate)
What it does: Redirects standard output to a file, overwriting the file if it already exists.

Example:
echo "hello" > file.txt

✅ Creates file.txt (if not existing)
✅ Writes "hello" into it
❌ Erases any previous content in file.txt

🔹 >> (Double Greater Than) — Output Redirection (Append)
What it does: Redirects standard output to a file, appending to the file if it already exists.

Example:
echo "world" >> file.txt

✅ Creates file.txt (if not existing)
✅ Adds "world" at the end of the existing content
✅ Preserves existing data